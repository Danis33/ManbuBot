import telebot
import sqlite3
import schedule
import time
import os

from telebot import types
from dotenv import load_dotenv
from threading import Thread
from datetime import datetime
from list import *

load_dotenv()

bot = telebot.TeleBot(os.getenv('TOKEN'))

user_states = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–∏—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
@bot.message_handler(commands=['start', '–ù–∞—á–∞—Ç—å'])
def get_start(message):
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(types.KeyboardButton("–ü–æ–º–æ—â—å"))
    markup.add(
        types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"),
        types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É"),
        types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è"),
        types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã"),
        types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"),
        types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ —Ç–µ–º–µ"),
    )
    markup.add(types.KeyboardButton("–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"))

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ü–æ–º–æ—â—å")
def to_help(message):
    send_help_message(message.chat.id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏
def send_help_message(chat_id):
    help_text = (
        "üìö *–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –±–æ—Ç—É - –ü–æ–º–æ—â—å*\n\n"
        "üîπ *–ó–∞–¥–∞–Ω–∏—è* - –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è.\n"
        "    - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ: –≤–≤–µ–¥–∏ –∑–∞–¥–∞–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n"
        "    - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n"
        "    - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ: –≤—ã–±–∏—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n\n"
        "üîπ *–¢–µ–º—ã* - –¥–æ–±–∞–≤–ª—è–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —É—á–µ–±–Ω—ã–µ —Ç–µ–º—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
        "    - –°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É: –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.\n"
        "    - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Ç–µ–º –∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫ –Ω–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n"
        "    - –£–¥–∞–ª–∏—Ç—å —Ç–µ–º—É: –≤—ã–±–∏—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã –¥–ª—è –µ–µ —É–¥–∞–ª–µ–Ω–∏—è.\n\n"
        "üîπ *–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã* - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª–µ–∑–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å—Å—ã–ª–æ–∫ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.\n"
        "    - –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –Ø–∑—ã–∫–∏ –∏ —Ç.–¥.), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏.\n\n"
        "üîπ *–ü–æ–º–æ—â—å* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç –∏ —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞.\n"
    )
    bot.send_message(chat_id, help_text, parse_mode="Markdown")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
def get_add_task(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ó–∞–¥–∞—á–∞; –ß–ß:–ú–ú")
    bot.register_next_step_handler(message, save_task)


def save_task(message):
    try:
        task_text, time_text = message.text.split(';')  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        add_task_to_db(message.chat.id, task_text.strip(), time_text.strip())  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ '{task_text.strip()}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {time_text.strip()}.")
    except:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: –ó–∞–¥–∞—á–∞; –ß–ß:–ú–ú")


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def check_reminders():
    conn = sqlite3.connect('db.sqlite3')
    cursor = conn.cursor()
    current_time = time.strftime("%H:%M")
    cursor.execute("SELECT user_id, task_text FROM tasks WHERE reminder_time = ?", (current_time,))
    tasks_to_remind = cursor.fetchall()

    for user_id, task in tasks_to_remind:
        bot.send_message(user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task}")
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        cursor.execute("DELETE FROM tasks WHERE user_id = ? AND task_text = ?", (user_id, task))
        conn.commit()


# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á
def schedule_checker():
    schedule.every().minute.do(check_reminders)
    while True:
        schedule.run_pending()
        time.sleep(1)


@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è")
def list_tasks(message):
    tasks = show_tasks()
    if tasks:
        task_list = "\n".join(tasks)
        bot.send_message(message.chat.id, f"–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n{task_list}")
    else:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç.")


@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
def delete(message):
    tasks = show_tasks()
    if tasks:
        task_list = "\n".join(tasks)
        msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{task_list}")
        bot.register_next_step_handler(msg, delete_task_handler)
    else:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç.")


def delete_task_handler(message):
    try:
        order_number = int(message.text)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        if delete_task(order_number):
            bot.send_message(message.chat.id, f"–ó–∞–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä {order_number} —É–¥–∞–ª–µ–Ω–æ.")
        else:
            bot.send_message(message.chat.id, "–ó–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è.")


@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—É")
def what_book(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã:')
    bot.register_next_step_handler(message, save_topic)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_topic(message):
    topic_name = message.text
    conn = sqlite3.connect('db.sqlite3')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO topics (topic_name) VALUES (?)", (topic_name,))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, f"–¢–µ–º–∞ '{topic_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫ –Ω–µ–π
@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ —Ç–µ–º–µ")
def topic_info(message):
    conn = sqlite3.connect('db.sqlite3')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM topics")
    topics = cursor.fetchall()
    conn.close()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–º—ã –≤ –ë–î
    if not topics:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ —Ç–µ–º –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_topic.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    response = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n"
    for topic in topics:
        response += f"{topic[0]}. {topic[1]}\n"
    bot.send_message(message.chat.id, response)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    bot.register_next_step_handler(message, get_topic_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def get_topic_id(message):
    try:
        topic_id = int(message.text)
        user_states[message.chat.id] = topic_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Ç–µ–º–µ:")
        bot.register_next_step_handler(message, save_content)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–º—ã.")
        bot.register_next_step_handler(message, get_topic_id)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ
def save_content(message):
    content = message.text
    topic_id = user_states.get(message.chat.id)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('db.sqlite3')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO topic_content (topic_id, content) VALUES (?, ?)", (topic_id, content))
    conn.commit()
    conn.close()

    bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–º—ã")
def view_info(message):
    conn = sqlite3.connect('db.sqlite3')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM topics")
    topics = cursor.fetchall()
    conn.close()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not topics:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ —Ç–µ–º –ø—É—Å—Ç. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_topic.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    response = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–µ–π:\n"
    for topic in topics:
        response += f"{topic[0]}. {topic[1]}\n"
    bot.send_message(message.chat.id, response)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–µ–º—É
    bot.register_next_step_handler(message, show_topic_content)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def show_topic_content(message):
    try:
        topic_id = int(message.text)  # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
        conn = sqlite3.connect('db.sqlite3')
        cursor = conn.cursor()

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
        cursor.execute("SELECT content FROM topic_content WHERE topic_id = ?", (topic_id,))
        contents = cursor.fetchall()
        conn.close()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
        if not contents:
            bot.send_message(message.chat.id, "–î–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π
            response = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ:\n"
            for content in contents:
                response += f"- {content[0]}\n"
            bot.send_message(message.chat.id, response)

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–º—ã.")
        bot.register_next_step_handler(message, show_topic_content)


@bot.message_handler(func=lambda message: message.text == "–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
def send_category_buttons(message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = get_resources()
    if not categories:
        bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    for category in categories:
        markup.add(types.KeyboardButton(category))

    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def go_back_to_main_menu(message):
    get_start(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
@bot.message_handler(func=lambda message: message.text in get_resources())
def send_resources_by_category(message):
    category = message.text
    resources = get_resources_by_category(category)
    if resources:
        response = ""
        for res in resources:
            name, description, link = res
            response += f"üîπ {name}\nüìñ {description}\nüîó [–°—Å—ã–ª–∫–∞]({link})\n\n"
        bot.send_message(message.chat.id, response, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, f"–†–µ—Å—É—Ä—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        bot.send_message(message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: " + category, reply_markup=types.ReplyKeyboardRemove())


# –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–±–æ—Ç—ã –∏–Ω—Ñ–æ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ
@bot.message_handler(commands=['message'])
def admins(message):
    bot.send_message(message.chat.id, message)


# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_thread = Thread(target=schedule_checker)
reminder_thread.start()


bot.polling(non_stop=True)
